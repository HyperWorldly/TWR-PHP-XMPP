// JavaScript Document//------------wRep Classvar wRep = {	connection: null,    nickname: null,    WG_MUC: "http://jabber.org/protocol/muc",    joined: null,    participants: null,	client: null,    pending_subscriber: null,	host: 'localhost', //subdomain.domain.com	xmppServer: "http://localhost:7070/http-bind/XMPP", //---http://localhost:7070/http-bind/XMPP		log: function(msg) {	$('span.xmpp-status').empty().append(msg);	},		    set_cookies: function() {        $.cookie('xmpp_jid', wRep.connection.jid, {path: '/'});        $.cookie('xmpp_sid', wRep.connection.sid, {path: '/'});        $.cookie('xmpp_rid', wRep.connection.rid, {path: '/'});    },        del_cookies: function() {        $.removeCookie('xmpp_jid', {path: '/'});        $.removeCookie('xmpp_sid', {path: '/'});        $.removeCookie('xmpp_rid', {path: '/'});		$.removeCookie('xmpp_user', {path: '/'});		$.removeCookie('xmpp_pass', {path: '/'});    },		addDate : function() {				var d = new Date();		return d.toUTCString();	},    jid_to_id: function (jid) {        return Strophe.getBareJidFromJid(jid)            .replace(/@/g, "-")            .replace(/\./g, "-");    },	    jid_to_name: function (jid) {        return Strophe.getBareJidFromJid(jid)		.substring(0, Strophe.getBareJidFromJid(jid).indexOf('@'));    },	    id_to_jid: function (jid) {        var txt = Strophe.getBareJidFromJid(jid)		.substring(Strophe.getBareJidFromJid(jid).indexOf('_'));		return txt.replace(/_/g, "").replace(/-/g, ".");    },		unmail_form: '<form action="http://localhost/includes/mail-form.php" method="post">'+				'<div id="depts-arrow" class="arrowRight"></div><div class="unmailed-workgroup-depts"></div>'+				'<input type="hidden" name="selected-depts" /><input type="hidden" name="wg-name" />'+				'<input type="hidden" name="ip-address" /><label class="narrow">Type</label>'+				'<select class="narrow" name="bill-type"><option value="billable">Billable</option>'+				'<option value="nonbillable">Non-Billable</option></select><br/>'+				'<label class="narrow">Department</label><span class="depts-chzn">Select</span><br/>'+				'<label class="narrow">To</label><input class="narrow" type="text" name="to" value="" /><br/>'+				'<label class="narrow">Cc</label><input class="narrow" type="text" name="cc" value="" /><br/>'+				'<label class="narrow">Bcc</label><input class="narrow" type="text" name="bcc" value="" /><br/>'+				'<label class="narrow">Comments</label><textarea class="narrow" name="comment"></textarea><br/>'+				'<label class="narrow">&nbsp;</label><input class="narrow" type="submit" value="Submit" /><br />'+				'<label class="narrow">&nbsp;</label><span class="error"></span>'+				'<textarea class="hidden" name="transcript"></textarea></form>',	connect_status: function(status) {		if (status === Strophe.Status.ERROR) {			wRep.log("Error <img src='assets/img/fail.png' alt='Error' />");		} else if (status === Strophe.Status.CONNECTING) {			wRep.log("Connecting <img src='assets/img/connecting.gif' alt='Connecting' />");        } else if (status === Strophe.Status.CONNFAIL) {			wRep.log("Connection Fail <img src='assets/img/fail.png' alt='Fail' />");			$(document).trigger('attach', cookie_data);		} else if (status === Strophe.Status.AUTHENTICATING) {            wRep.log("Authenticating <img src='assets/img/authenticating.png' alt='Authenticating' />");		} else if (status === Strophe.Status.AUTHFAIL) {            wRep.connection.disconnect();			wRep.connection = null		} else if (status === Strophe.Status.CONNECTED) {			wRep.log("Connected <img src='assets/img/connected.png' alt='Connected' />");			$(document).trigger('connected');		} else if (status === Strophe.Status.DISCONNECTED) {			wRep.log("Disconntected <img src='assets/img/fail.png' alt='Disconntected' />");			$(document).trigger('disconnected');        } else if (status === Strophe.Status.ATTACHED) {			wRep.log("Connected <img src='assets/img/connected.png' alt='Attached' />");			$(document).trigger('attached');		}	},	    on_roster: function (iq) {        $(iq).find('item').each(function () {            var jid = $(this).attr('jid');            var name = $(this).attr('name') || jid;            // transform jid into an id            var jid_id = wRep.jid_to_id(jid);            var contact = $("<option id='" + jid_id + "' class='offline'>" +                             jid +"</option>");			if($('#' + jid_id).length == 0 && jid != 'pubsub.'+ wRep.host){            	wRep.insert_contact(contact);			}        });        // set up presence handler and send initial presence		wRep.connection.addHandler(wRep.on_presence, null, "presence");        wRep.connection.send($pres(), $('#presence').attr('src', 'assets/img/available.png'));    },    on_presence: function (presence) {        var ptype = $(presence).attr('type');        var from = $(presence).attr('from');		var room_data = Strophe.getBareJidFromJid(from);		var room = Strophe.getNodeFromJid(from);		var user_jid = $(presence).find('item').attr('jid');		var nick = Strophe.getResourceFromJid(from);				if (ptype === 'error' && !wRep.joined) {			// error joining room; reset app			wRep.connection.disconnect();		} else if(user_jid) {			if (!wRep.participants[nick] && ptype !== 'unavailable') {				// add to participant list				wRep.participants[nick] = user_jid || true;				if (wRep.joined) {					$(document).trigger('user_joined', nick);				};			} else if (wRep.participants[nick] && ptype === 'unavailable') {				var room_res = from.substring(0,from.indexOf('_'));				var jid_res = Strophe.getResourceFromJid(user_jid);				if(room_res == jid_res){					$(document).trigger('user_left', {nickname: nick, roomid: room});				}			}		}		if (ptype !== 'error' && !wRep.joined) {				// room join complete				$(document).trigger("room_joined");		}		// reset addressing for user since their presence changed		$('#chat-' + room).data('jid', room_data);				var jid_id = wRep.jid_to_id(from);		if($('#roster-area').length > 0){			if (ptype === 'subscribe') {				// populate pending_subscriber, the approve-jid span				wRep.pending_subscriber = from;		   } else if (ptype !== 'error') {				var contact = $('#roster-area > #'+ jid_id)					.removeClass("online")					.removeClass("away")					.removeClass("offline");				if (ptype === 'unavailable') {					contact.addClass("offline");					var mont_jid = wRep.jid_to_name(from);					if($('#payloads-rep li#'+ mont_jid).length > 0){						$('#payloads-rep li#'+ mont_jid).remove();					}				} else {					var show = $(presence).find("show").text();					if (show === "" || show === "chat") {						contact.addClass("online");					} else {						contact.addClass("away");					}				}				var li = contact;				li.remove();				wRep.insert_contact(li);			}		}        return true;    },	    presence_value: function (elem) {		if (elem.hasClass('online')) {			return 2;		} else if (elem.hasClass('away')) {			return 1;		}		return 0;    },    on_roster_changed: function (iq) {        $(iq).find('item').each(function () {            var sub = $(this).attr('subscription');            var jid = $(this).attr('jid');            var name = $(this).attr('name') || jid;            var jid_id = wRep.jid_to_id(jid);            if (sub === 'remove') {                // contact is being removed                $('#' + jid_id).remove();            } else {                // contact is being added or modified                var contact_html = "<option id='" + jid_id + "' class='" +                     ($('#' + jid_id).attr('class') || "offline") +"'>"+ jid +"</option>";                if ($('#' + jid_id).length > 0) {                    $('#' + jid_id).replaceWith(contact_html);                } else {                    wRep.insert_contact($(contact_html));                }            }        });        return true;    },    insert_contact: function (elem) {        var jid = elem.text();        var pres = wRep.presence_value(elem);        var contacts = $('#roster-area option');        if (contacts.length > 0) {            var inserted = false;            contacts.each(function () {                var cmp_pres = wRep.presence_value(                    $(this));                var cmp_jid = $(this).text();                if (pres > cmp_pres) {                    $(this).before(elem);                    inserted = true;                    return false;                } else if (pres === cmp_pres) {                    if (jid < cmp_jid) {                        $(this).before(elem);                        inserted = true;                        return false;                    }                }            });            if (!inserted) {                $('#roster-area').append(elem);            }        } else {            $('#roster-area').append(elem);        }    },    on_message: function (message) {        var from = $(message).attr('from');		var type= $(message).attr('type');		if(!type) {			var offer_node = $(message).find('offer');			var invite_node = $(message).find('invite');			if($(offer_node).length > 0){				roomid = Strophe.getResourceFromJid(from);				var invite_workgroup = wRep.jid_to_id(offer_node.text());				var room = roomid +'_'+ invite_workgroup;				createRoom = room +'@conference.'+ wRep.host;				wRep.connection.send($pres({to: createRoom + "/" + wRep.nickname}).c('query', {xmlns:'http://jabber.org/protocol/muc#owner'}).c('x', {xmlns:'jabber:x:data', type:'submit'}).tree());				wRep.connection.send($msg({to: createRoom, from:wRep.connection.jid}).c('x', {xmlns:'http://jabber.org/protocol/muc#user'}).c('invite', {to:from}).c('reason').t('Join room').tree());			}		 	if($(invite_node).length > 0){				wRep.connection.send($pres({to: from +'/'+ wRep.nickname}));			}		} else if(type == "chat") {			var room = Strophe.getNodeFromJid(from)			var composing = $(message).find('composing');			if (composing.length > 0) {				$('#chat-'+ room).append("<div class='chat-event'>" +					room +" is typing...</div>");			}						var body = $(message).find("html > body");			if (body.length === 0) {				body = $(message).find('body');				if (body.length > 0) {					body = body.text()				} else {					body = null;				}			} else {				body = body.contents();				var span = $("<span></span>");				body.each(function () {					if (document.importNode) {						$(document.importNode(this, true)).appendTo(span);					} else {						// IE workaround						span.append(this.xml);					}				});				body = span;			}			if (body) {				$('div.chat-event').remove();			}		}	return true;    },	    on_public_message: function (message) {        var from = $(message).attr('from');        var room = Strophe.getNodeFromJid(from);		var room_data = Strophe.getBareJidFromJid(from);        var nick = Strophe.getResourceFromJid(from);		var info_node = $(message).find('brwsrinfo');        // make sure message is from the right place		var jid_id = room;        var notice = !nick;		if($('#ribbon li#'+ room).length === 0 && $('#monitor li#mnt-'+ room).length === 0){			$('#ribbon').append('<li id="'+ room +'" class="new-chat">'+ room +'</li>');			$('#chat-area').append('<li id="chat-'+ room +'">'+			'<img id="info-email" class="set-info" src="assets/img/set_email.png" />'+			'<img id="info-name" class="set-info" src="assets/img/set_name.png" />'+			'<img id="info-contact" class="set-info" src="assets/img/set_contact.png" />'+			'<img class="chat-block" src="assets/img/block_ip.png" />'+			'<img class="chat-transfer" src="assets/img/transfer.png" />'+			'<img class="chat-restore" src="assets/img/restore.png" /><div class="chat-messages">'+			'</div><div class="chat-info"><label class="narrow">Client Email</label>'+			'<input type="text" class="narrow" name="info-email" /><br/>'+			'<label class="narrow">Client Name</label>'+			'<input type="text" class="narrow" name="info-name" /><br/>'+			'<label class="narrow">Client Contact</label>'+			'<input type="text" class="narrow" name="info-contact"><br/></div>'+			'<input type="text" class="chat-input" placeholder="Type here..."></li>');			$('#brwsrinfo').append('<li id="brwsrinfo-'+ room +'"></li>');			sizeElem();			$('#chat-' + room).data('jid', room_data);						//update chat count			var repchats_set = $iq({type:'set', to:'pubsub.'+ wRep.host}).c('pubsub', {xmlns:'http://jabber.org/protocol/pubsub'}).c('publish', {node:'allRepsVisits'}).c('item', {id:Strophe.getNodeFromJid(wRep.connection.jid)}).c('chats').t(''+$('#ribbon li').length+'').tree();			wRep.connection.sendIQ(repchats_set);						$('#roomsxml').empty();			traverseID($('#roomsxml'), $('#ribbonParent').children().first());			//set room names in repVisits			var repRooms_set = "<iq type='set' to='pubsub."+ wRep.host +"'><pubsub xmlns='http://jabber.org/protocol/pubsub'><publish node='"+ Strophe.getNodeFromJid(wRep.connection.jid) +"-repStats'>"+"<item id='repVisits'>"+ $('#roomsxml').html() +"</item></publish></pubsub></iq>";			var repRooms_xml = wRep.text_to_xml(repRooms_set);			wRep.connection.sendIQ(repRooms_xml);						//set repGroup room names			var repGroupRooms_set = "<iq type='set' to='pubsub."+ wRep.host +"'><pubsub xmlns='http://jabber.org/protocol/pubsub'><publish node='"+ wRep.id_to_jid(room) +"-visits'>"+"<item id='"+ wRep.id_to_jid(room) +"'>"+ $('#roomsxml').html() +"</item></publish></pubsub></iq>";			var repGroupRooms_xml = wRep.text_to_xml(repGroupRooms_set);			wRep.connection.sendIQ(repGroupRooms_xml);		}		wRep.ribbonLength();		if($('#monitor li#mnt-'+ jid_id).length > 0) {			var body = $(message).children('body').text();            var delayed = $(message).children("delay").length > 0  ||                $(message).children("x[xmlns='jabber:x:delay']").length > 0;			$('#mnt-'+ jid_id +' .chat-messages').append(				"<div class='chat-message'><span class='chat-name'>"+ room +				"</span><span class='chat-text'></span></div>");			$('#mnt-'+ jid_id +' .chat-message:last .chat-text').append(body);			wRep.scroll_chat(jid_id);		} else if($(info_node).length > 0){			var body = $(message).children('brwsrinfo').text();			var url = $(message).children('url').text();			var user_ip = $(message).children('ip').text();			$('#brwsrinfo-'+ jid_id).html(body +'<br/><a target="_blank" href='+ 			url +'>'+ url +'</a><br /><span>'+ user_ip +'</span>');			wRep.createsoundbite("assets/sounds/click.ogg", "assets/sounds/click.mp3").playclip();		} else {			var body = $(message).children('body').text();			//var pushUrl = $(message).children('url').html();            // messages from ourself will be styled differently            var nick_class = "";            if (nick === wRep.nickname) {                nick_class += "me";            }            var delayed = $(message).children("delay").length > 0  ||                $(message).children("x[xmlns='jabber:x:delay']").length > 0;            if (!notice) {                var delay_css = delayed ? " delayed" : "";                var action = body.match(/\/me (.*)$/);                if (!action) {					if(nick_class == 'me') {						$('#chat-' + jid_id + ' .chat-messages').append(							"<div class='chat-message'><span class='chat-name-me'>"+ 							Strophe.getNodeFromJid(wRep.connection.jid) +							": </span><span class='chat-text-me'></span></div>");						$('#chat-'+ jid_id +' .chat-message:last .chat-text-me').append(body);					} else {						$('#chat-' + jid_id + ' .chat-messages').append(							"<div class='chat-message'><span class='chat-name'>"+ room +							": </span><span class='chat-text'></span></div>");						$('#chat-'+ jid_id +' .chat-message:last .chat-text').append(body);						// on msg color and sound alert						if(!$('#ribbon li#'+ jid_id).hasClass('active')){							$('#ribbon li#'+ jid_id).addClass('chat-alert');						}						wRep.createsoundbite("assets/sounds/click.ogg", "assets/sounds/click.mp3").playclip();					}					wRep.scroll_chat(jid_id);					// remove notifications since user is now active					$('#chat-' + jid_id).children('div.chat-event').remove();                } else {                    //wRep.add_message("<div class='message action " + delay_css + "'>* " + 					//nick + " " + action[1] + "</div>");                }            } else {                //wRep.add_message("<div class='notice'>*** " + body + "</div>");            }        }        return true;    },    scroll_chat: function (jid_id) {		if($('#chat-' + jid_id + ' .chat-messages').length > 0){			var div = $('#chat-' + jid_id + ' .chat-messages').get(0);			div.scrollTop = div.scrollHeight;		}		if($('#mnt-'+ jid_id +' .chat-messages').length > 0){		 var div = $('#mnt-'+ jid_id +' .chat-messages').get(0);		 div.scrollTop =  div.scrollHeight;		}    },		createsoundbite: function(sound){		// audio alerts function		var html5_audiotypes={ //define list of audio file extensions and their associated audio types.			"mp3": "audio/mpeg",			"mp4": "audio/mp4",			"ogg": "audio/ogg",			"wav": "audio/wav"		}		var html5audio=document.createElement('audio')		if (html5audio.canPlayType){ //check support for HTML5 audio			for (var i=0; i<arguments.length; i++){				var sourceel=document.createElement('source')				sourceel.setAttribute('src', arguments[i])				if (arguments[i].match(/\.(\w+)$/i))					sourceel.setAttribute('type', html5_audiotypes[RegExp.$1])				html5audio.appendChild(sourceel)			}			html5audio.load()			html5audio.playclip=function(){				html5audio.pause()				//html5audio.currentTime=0				html5audio.play()			}			return html5audio		} else {			return {playclip:function(){throw new Error("Your browser doesn't support HTML5 audio unfortunately")}}		}	},		on_pubsub: function(pub){		var pubsub = $(pub).find('pubsub');		var pubitem = $(pub).find('item');		$(pubsub).replaceWith($(pubitem).contents());				var canned = $(pub).find('rgcanned');		var department = $(pub).find('rgdepts');		var allReps = $(pub).find('allreps');		var queue = $(pub).find('queue');		var status = $(pub).find('status');		var script = $(pub).find('script');		if($(canned).length){			traverseXML($('#repGroupCanned-view'), pub.firstChild);		} else if($(department).length){			traverseXML($('#repGroupDepts-view'), pub.firstChild);		} else if($(allReps).length) {			traverseXML($('#repGroupUsers-view'), pub.firstChild);			assigendJid();		} else if($(queue).length) {			traverseXML($('#repGroupQueue-view'), pub.firstChild);		} else if($(status).length) {			traverseXML($('#repGroupStatus-view'), pub.firstChild);			wRep.class_as_text('#repGroupStatus-view div.details div');		} else if($(script).length) {			traverseXML($('#repGroupScript-view'), pub.firstChild);			wRep.class_as_text('#repGroupScript-view div.script div');		}	},			on_private: function(canned){		var node_query = $(canned).find('query');		$(node_query).replaceWith($(node_query).contents());		var node_folders = $(canned).find('usercanned');		if($(node_folders).length > 0){			if($('#repCanned-view').length > 0){				$('#repCanned-view').empty();				traverseXML($('#repCanned-view'), canned.firstChild);			} 			$('#chat-user-canned').empty();			traverseXML($('#chat-user-canned'), canned.firstChild);		} else {			// set private usercanned			var userCanned_set = $iq({type:'set'}).c('query', {xmlns:'jabber:iq:private'}).c('usercanned').c('folder').c('title').t('Folder').up().c('msgs').tree();			wRep.connection.sendIQ(userCanned_set);			// get private usercanned			var userCanned_get = $iq({type:'get'}).c('query', {xmlns:'jabber:iq:private'}).c('usercanned').tree();			wRep.connection.sendIQ(userCanned_get, wRep.on_private);		}	},		on_wgCanned: function(rgCanned){		var pubsub = $(rgCanned).find('pubsub');		var pubitem = $(rgCanned).find('item');		$(pubsub).replaceWith($(pubitem).contents());				var canned = $(rgCanned).find('rgcanned');		if($(canned).length){			$('#chat-workgroup-canned').empty();			traverseXML($('#chat-workgroup-canned'), rgCanned.firstChild);		}	},		on_wgDepts: function(rgDepts){		var pubsub = $(rgDepts).find('pubsub');		var pubitem = $(rgDepts).find('item');		$(pubsub).replaceWith($(pubitem).contents());				var depts = $(rgDepts).find('department');		if($(depts).length){			//$('div.unmailed-workgroup-depts:visible').empty();			traverseXML($('div.unmailed-workgroup-depts:visible'), rgDepts.firstChild);		}	},		on_payload: function (message) {		var resp = 'pubsub.'+ wRep.host;		if ($(message).attr('from').match(resp)) {			var jidFrom = $(message).find('items').attr('node');			if(jidFrom.indexOf('.') !== -1){				jidFrom = wRep.jid_to_id(jidFrom).substring(0, jidFrom.indexOf('-'))				if($('#payloads-group li#'+ jidFrom).length === 0) {					$('#payloads-group').append("<li id='"+ jidFrom +"'><div class='payload-jid'>"+ jidFrom 					+"</div><!--<div class='ribbon-count'><div>---></li>");				}//				var payload = $(message).find('event');//				var payloadItem = $(message).find('item');//				payload.replaceWith(payloadItem.contents());//				//				var ribbon_data = $(message).find('ribbon');//				if(ribbon_data.length > 0){//					wRep.payload_div(jidFrom, 'ribbon');//					traverseXML($('li#'+ jidFrom), message.firstChild);//					wRep.class_as_text('li#'+ jidFrom +' > div.ribbon');//					$('li#'+ jidFrom +' > div.ribbon-count').html("<span class='payload-label'>Rooms :</span>"+//					$('li#'+ jidFrom +' > div.ribbon').children().length);//				}			} else if(jidFrom.indexOf('-') >= 0) {				jidFrom = jidFrom.substring(0, jidFrom.indexOf('-'))				if($('#payloads-rep li#'+ jidFrom).length === 0 && jidFrom != Strophe.getNodeFromJid(wRep.connection.jid)) {					$('#payloads-rep').append("<li id='"+ jidFrom +"'><div class='payload-jid'>"+					 jidFrom +"</div><div class='reppres'></div><div class='prestotals'></div><div class='repview'></div><div class='viewtotals'></div><div class='chats'></div><div class='ribbon'></div><div class='repunmailed'></div></li>");				}				var payload = $(message).find('event');				var payloadItem = $(message).find('item');				payload.replaceWith(payloadItem.contents());								var repview_data = $(message).find('repview');				var viewtotals_data = $(message).find('viewtotals');				var reppres_data = $(message).find('reppres');				var prestotals_data = $(message).find('prestotals');				var repvisits_data = $(message).find('ribbon');				var repunamiled_data = $(message).find('repunmailed');				if(repview_data.length > 0){					wRep.payload_div('li#'+ jidFrom, repview_data);				} else if(viewtotals_data.length > 0){					wRep.payload_div('li#'+ jidFrom, viewtotals_data);				} else if(reppres_data.length > 0){					wRep.payload_div('li#'+ jidFrom, reppres_data);				} else if(prestotals_data.length > 0){					wRep.payload_div('li#'+ jidFrom, prestotals_data);				} else if(repvisits_data.length > 0){					$('li#'+ jidFrom +' > div.chats').html("<span class='payload-label'>Chats :</span>"+					 $(repvisits_data).children().length);					wRep.payload_div('li#'+ jidFrom, repvisits_data);				} else if(repunamiled_data.length > 0){					wRep.payload_div('li#'+ jidFrom, repunamiled_data);				}			}		}	return true;	},		class_as_text: function(args){		$(args).each(function(index) {			var name = $(this).attr('class');			var textString = $(this).justtext();			if(textString.length > 0) {				$(this).prepend('<span class="payload-label">'+ name +' :</span>');			}		});	},		payload_div: function(node, xml) {		var rootNode = $(xml).prop('tagName');		$(node +' > div.'+ rootNode).empty();		if($(xml).children().length > 0) {			if(rootNode == 'ribbon') {				$($(xml).children()).each(function () {					$(node +' > div.'+ rootNode).append("<div>"+ $(this).text() + "</div>");				});			} else {				$($(xml).children()).each(function () {					$(node +' > div.'+ rootNode).append($(this).prop('tagName').toUpperCase() +" : "+ 					$(this).text() + "<hr />");				});			}		} else {			$(node +' > div.'+ rootNode).html('<span class="payload-label">'+ 			$(xml).prop("tagName") +' : </span>'+ $(xml).text());			}	},	    text_to_xml: function (text) {        var doc = null;        if (window['DOMParser']) {            var parser = new DOMParser();            doc = parser.parseFromString(text, 'text/xml');        } else if (window['ActiveXObject']) {            var doc = new ActiveXObject("MSXML2.DOMDocument");            doc.async = false;            doc.loadXML(text);        } else {            throw {                type: 'iqError',                message: 'No DOMParser object found.'            };        }        var elem = doc.documentElement;        if ($(elem).filter('parsererror').length > 0) {            return null;        }        return elem;    },		ribbonLength: function(){		if ($('#ribbon li').length >= 0){			$('div.user-panel-bottom').append('<span id="timeout-btn" class="btn">Request Timeout</span>');			$('#presStatus, #logout').remove();		}	},		umailedLength: function(){		if($('#unmailed li').length === 0 && $('#ribbon li').length === 0) {			var statusPanel = ('<ul id="presStatus"><li class="online"><img src="assets/img/available.png" alt="Available" />Online</li><li class="break"><img src="assets/img/break.png" alt="break" />Break</li><li class="meeting"><img src="assets/img/break.png" alt="break" />Meeting</li><li class="lunch"><img src="assets/img/break.png" alt="break" />Lunch</li></ul>');			$('#timeout-btn').remove();			$('div.user-panel-top').prepend(statusPanel);			$('div.user-panel-bottom').append('<span id="logout" class="logout-btn">Logout</span>');		}	},		on_subscribe: function(pres){		var pubsubPres = $pres({to:'pubsub.'+ wRep.host, from:Strophe.getBareJidFromJid(wRep.connection.jid), type:'subscribed'});		wRep.connection.send(pubsubPres);	},		on_pong: function(pong){		var form = $(pong).find('from')		alert(from)	}};//------------wRep Class//--- cookiesvar cookie_data = {	jid: $.cookie('xmpp_jid'),	sid: $.cookie('xmpp_sid'),	rid: $.cookie('xmpp_rid'),	user: $.cookie('xmpp_user'),	auth: $.cookie('xmpp_pass')}// active chats$(document).on('click', '#jidActive-btn', function(){	wRep.connection.sendIQ($iq({type:'set', to:'pubsub.'+ wRep.host}).c('pubsub', {xmlns:'http://jabber.org/protocol/pubsub'}).c('publish', {node:'allRepsVisits'}).c('item', {id:Strophe.getNodeFromJid(wRep.connection.jid)}).c('chats').t('0').tree());	$('#presStatus li:first').click();	$(this).remove();});//--- submit login form$(document).on('submit', '#login-form', function(){	var $formID = $(this).attr('id');	var $formUrl = $(this).attr('action');	var $x = document.forms[$formID]['x'].value;	var $z = document.forms[$formID]['z'].value; 	ValidateForm($formID);	if(ValidateForm($formID) == true) {		$(document).trigger('connect', {jid: $x +'@'+ wRep.host, password: $z});	}	return false;});//--- wRep trigger connect$(document).on('connect', function(e, data) {	wRep.connection = new Strophe.Connection(wRep.xmppServer);	wRep.connection.connect(data.jid, data.password, wRep.connect_status);});//--- wRep on connected status$(document).on('connected', function() {	if($('#login-form').length > 0){		var data_string = $('#login-form').serialize();		$.ajax({			cache: false,			type: "POST",			url: 'includes/login-exe.php',			data: data_string,			success: function(html){				if (html === 'True'){					$.cookie('xmpp_user', document.forms['login-form']['x'].value +'@'+ wRep.host, {path: '/'});					$.cookie('xmpp_pass', document.forms['login-form']['z'].value, {path: '/'});					window.location = 'dashboard.php';				} else {					$('span.error').html(html);				}			},error: function (xhr, ajaxOptions, thrownError) {				alert(xhr.responseText);			}		});	} else {		$(document).trigger('attached');	}});//--- wRep trigger attach$(document).on('attach', function(e, data) {	if((data != null) && (data != '') && (data.sid != null)){    	wRep.connection = new Strophe.Connection(wRep.xmppServer);		wRep.connection.attach(data.jid, data.sid, data.rid, wRep.connect_status);	}});//--- wRep on attached status$(document).on('attached', function() {    wRep.joined = false;    wRep.participants = {};	wRep.nickname = Strophe.getResourceFromJid(wRep.connection.jid);//    wRep.connection.rawInput = console.log;//    wRep.connection.rawOutput = console.log;    var iq = $iq({type: 'get'}).c('query', {xmlns: 'jabber:iq:roster'});    wRep.connection.sendIQ(iq, wRep.on_roster);		var userCanned_get = $iq({type:'get'}).c('query', {xmlns:'jabber:iq:private'}).c('usercanned').tree();	wRep.connection.sendIQ(userCanned_get, wRep.on_private);		wRep.connection.addHandler(wRep.on_subscribe, null, "presence", "subscribe");    wRep.connection.addHandler(wRep.on_roster_changed, "jabber:iq:roster", "iq", "set");    wRep.connection.addHandler(wRep.on_message, null, "message", null);    wRep.connection.addHandler(wRep.on_public_message, null, "message", "groupchat");	wRep.connection.addHandler(wRep.on_offer, "jabber:client", "iq", "set");	wRep.connection.addHandler(wRep.on_payload, null, "message", null, null, "pubsub."+ wRep.host);	//wRep.connection.addHandler(wRep.on_pong, "urn:xmpp:ping", "iq", null);	// publish reproomstotals item iq	var roomstotalItem_set = $iq({type:'set', to:'pubsub.'+ wRep.host}).c('pubsub', {'xmlns':'http://jabber.org/protocol/pubsub'}).c('publish', {'node':Strophe.getNodeFromJid(wRep.connection.jid) +'-repStats'}).c('item', {'id':'repVisits'}).c('ribbon').t('0').tree();	wRep.connection.sendIQ(roomstotalItem_set);		// publish reppres item iq	var currentPresItem_set = $iq({type:'set', to:'pubsub.'+ wRep.host}).c('pubsub', {'xmlns':'http://jabber.org/protocol/pubsub'}).c('publish', {'node':Strophe.getNodeFromJid(wRep.connection.jid) +'-repStats'}).c('item', {'id':'repPres'}).c('reppres').t('online').tree();	wRep.connection.sendIQ(currentPresItem_set);		// publish repUnmailed item iq	var repUnmailed_set = $iq({type:'set', to:'pubsub.'+ wRep.host}).c('pubsub', {'xmlns':'http://jabber.org/protocol/pubsub'}).c('publish', {'node':Strophe.getNodeFromJid(wRep.connection.jid) +'-repStats'}).c('item', {'id':'repUnmailed'}).c('repunmailed').t('0').tree();	wRep.connection.sendIQ(repUnmailed_set);	});//--- on logout$(document).on('click', '#logout', function(){	wRep.connection.sendIQ($iq({type:'set', to:'pubsub.'+ wRep.host}).c('pubsub', {xmlns:'http://jabber.org/protocol/pubsub'}).c('retract', {node:'allRepsVisits'}).c('item', {id:Strophe.getNodeFromJid(wRep.connection.jid)}).tree());	$(document).trigger('disconnect');	return false;});//--- wRep trigger disconnect$(document).on('disconnect', function() {	$(document).off('disconnected');	wRep.connection.send($pres({type: 'unavailable'}).tree());	wRep.connection.sync = true;	wRep.active = false;	wRep.connection.flush();	wRep.connection.disconnect();	wRep.del_cookies();	wRep.connection = null;	window.location = 'includes/logout-exe.php';});//--- wRep on diconnected status$(document).on('disconnected', function() {	wRep.connection.send($pres({type: 'unavailable'}), $('#presence').attr('src', 'assets/img/unavailable.png'));	wRep.pending_subscriber = null;	function connectRetry(){		wRep.connection = new Strophe.Connection(wRep.xmppServer);		wRep.connection.connect(cookie_data.user, cookie_data.auth, wRep.connect_status);	}	setTimeout(connectRetry, 500);});//--- wRep on page unload$(window).on('unload', function() {    if(wRep.connection !== null){		wRep.connection.pause();		wRep.set_cookies();    } else {        wRep.del_cookies();    }});//--- submit register user form$(document).on('submit', 'form.register', function(event){	event.preventDefault();	var $formID = $(this).attr('id');	var $formUrl = $(this).attr('action');	var $x = document.forms[$formID]['x'].value;	var $y = document.forms[$formID]['y'].value;	var $z = document.forms[$formID]['z'].value;	var $a = document.forms[$formID]['a'].value; 	ValidateForm($formID);	if(ValidateForm($formID) == true) {		var userRegister_iq = $iq( {type:"set" }).c("query", { xmlns:"jabber:iq:register"})		.c("username", $x).up().c("password", $z).up().c("email", $y).up().c("name", $a);		wRep.connection.sendIQ(userRegister_iq);		$(document).trigger('register', {user: $x});		var data_string = $(this).serialize();		$.ajax({			cache: false,			type: "POST",			url: $formUrl,			data: data_string,			success: function(html){				$('body').append(html);				$('#user-reload').click();			},error: function (xhr, ajaxOptions, thrownError) {				alert(xhr.responseText);			}		})	};	return false;});//--- register user$(document).on('register', function(e, data){	// publish node for rep	var repNode_Set = $iq({type:'set', to:'pubsub.'+ wRep.host, id:'setrepStatsNodeFor'+ data.user +'-RepStats'})	.c('pubsub', {xmlns: 'http://jabber.org/protocol/pubsub'})	.c('create', {node: data.user +'-repStats'}).up()	.c('configure')	.c('x', {xmlns: 'jabber:x:data', type: 'submit'})	.c('field', {var: 'pubsub#title'})	.c('value').t(data.user +'-repStats').up().up()	.c('field', {var: 'pubsub#description'})	.c('value').t('All activity statistics of '+ data.user).up().up()	.c('field', {var: 'pubsub#node_type'})	.c('value').t('leaf').up().up()	.c('field', {var: 'pubsub#subscribe'})	.c('value').t('1').up().up()	.c('field', {var: 'pubsub#deliver_payloads'})	.c('value').t('1').up().up()	.c('field', {var: 'pubsub#notify_config'})	.c('value').t('1').up().up()	.c('field', {var: 'pubsub#notify_delete'})	.c('value').t('1').up().up()	.c('field', {var: 'pubsub#notify_retract'})	.c('value').t('1').up().up()	.c('field', {var: 'pubsub#presence_based_delivery'})	.c('value').t('1').up().up()	.c('field', {var: 'pubsub#access_model'})	.c('value').t('whitelist').up().up()	.c('field', {var: 'pubsub#publish_model'})	.c('value').t('publishers').up().up()	.c('field', {var: 'pubsub#language'})	.c('value').t('English').up().up()	.c('field', {var: 'pubsub#send_item_subscribe'})	.c('value').t('1').up().up()	.c('field', {var: 'pubsub#persist_items'})	.c('value').t('1').up().up()	.c('field', {var: 'pubsub#max_items'})	.c('value').t('-1').up().up()	.tree();	wRep.connection.sendIQ(repNode_Set);		// publish node assignedRGs for rep	var repRGsNode_Set = $iq({type: 'set', to: 'pubsub.'+ wRep.host, id: 'setassignedRGsNodeFor'+ data.user})	.c('pubsub', {xmlns: 'http://jabber.org/protocol/pubsub'})	.c('create', {node: data.user +'-assignedRGs'}).up()	.c('configure')	.c('x', {xmlns: 'jabber:x:data', type: 'submit'})	.c('field', {var: 'pubsub#title'})	.c('value').t(data.user +'-assignedRGs').up().up()	.c('field', {var: 'pubsub#description'})	.c('value').t('Assigend RepGroups of '+ data.user).up().up()	.c('field', {var: 'pubsub#node_type'})	.c('value').t('leaf').up().up()	.c('field', {var: 'pubsub#subscribe'})	.c('value').t('1').up().up()	.c('field', {var: 'pubsub#deliver_payloads'})	.c('value').t('1').up().up()	.c('field', {var: 'pubsub#notify_config'})	.c('value').t('1').up().up()	.c('field', {var: 'pubsub#notify_delete'})	.c('value').t('1').up().up()	.c('field', {var: 'pubsub#notify_retract'})	.c('value').t('1').up().up()	.c('field', {var: 'pubsub#presence_based_delivery'})	.c('value').t('1').up().up()	.c('field', {var: 'pubsub#access_model'})	.c('value').t('whitelist').up().up()	.c('field', {var: 'pubsub#publish_model'})	.c('value').t('publishers').up().up()	.c('field', {var: 'pubsub#language'})	.c('value').t('English').up().up()	.c('field', {var: 'pubsub#send_item_subscribe'})	.c('value').t('1').up().up()	.c('field', {var: 'pubsub#persist_items'})	.c('value').t('1').up().up()	.c('field', {var: 'pubsub#max_items'})	.c('value').t('-1').up().up()	.tree();	wRep.connection.sendIQ(repRGsNode_Set);});//--- submit change password form$(document).on('submit', '#change-pass', function(){	var $formID = $(this).attr('id');	var $z = document.forms[$formID]['z'].value; 	ValidateForm($formID);	if(ValidateForm($formID) == true) {		$(document).trigger('changePass', {pass: $z});	}	return false;});//--- change password$(document).on('changePass', function(e, data){	var changePass_iq = $iq( {type:"set" }).c("query", {xmlns:"jabber:iq:register"})	.c("username", Strophe.getNodeFromJid(cookie_data.user)).up().c("password", data.pass)	wRep.connection.sendIQ(changePass_iq);});//--- submit add workgroup form$(document).on('submit', '#add-domain-form', function(event){	event.preventDefault();	var $formID = $(this).attr('id');	var $formUrl = $(this).attr('action');	var $x = document.forms[$formID]['x'].value;	var $y = document.forms[$formID]['y'].value;	var $z = document.forms[$formID]['z'].value;	var $a = document.forms[$formID]['a'].value; 	ValidateForm($formID);	if(ValidateForm($formID) == true) {		var userRegister_iq = $iq( {type:"set" }).c("query", { xmlns:"jabber:iq:register"})		.c("username", $x).up().c("password", $z).up().c("email", $y).up().c("name", $a);		wRep.connection.sendIQ(userRegister_iq);		$(document).trigger('addRepgroup', {rgName: $x});		var data_string = $(this).serialize();		$.ajax({			cache: false,			type: "POST",			url: $formUrl,			data: data_string,			success: function(html){					$('span.error').append(html);					$('a.reload:visible').click();			},error: function (xhr, ajaxOptions, thrownError) {				alert(xhr.responseText);			}		});	}	return false;});//--- add workgroup$(document).on('addRepgroup', function(e, data){	// publush node of reGroup iq	var repNode_set = $iq({type:'set', to:'pubsub.'+ wRep.host, id:'setrepGroupNodeFor'+ data.rgName +'-repGroup'})	.c('pubsub', {xmlns: 'http://jabber.org/protocol/pubsub'})	.c('create', {node: data.rgName +'-repGroup'}).up()	.c('configure')	.c('x', {xmlns: 'jabber:x:data', type: 'submit'})	.c('field', {var: 'pubsub#title'})	.c('value').t(data.rgName +'-repGroup').up().up()	.c('field', {var: 'pubsub#description'})	.c('value').t('Departments, Canned & Info of '+ data.rgName +'-repGroup').up().up()	.c('field', {var: 'pubsub#node_type'})	.c('value').t('leaf').up().up()	.c('field', {var: 'pubsub#subscribe'})	.c('value').t('1').up().up()	.c('field', {var: 'pubsub#deliver_payloads'})	.c('value').t('1').up().up()	.c('field', {var: 'pubsub#notify_config'})	.c('value').t('0').up().up()	.c('field', {var: 'pubsub#notify_delete'})	.c('value').t('1').up().up()	.c('field', {var: 'pubsub#notify_retract'})	.c('value').t('1').up().up()	.c('field', {var: 'pubsub#presence_based_delivery'})	.c('value').t('1').up().up()	.c('field', {var: 'pubsub#access_model'})	.c('value').t('whitelist').up().up()	.c('field', {var: 'pubsub#language'})	.c('value').t(data.rgName +'Details').up().up()	.c('field', {var: 'pubsub#send_item_subscribe'})	.c('value').t('1').up().up()	.c('field', {var: 'pubsub#persist_items'})	.c('value').t('1').up().up()	.c('field', {var: 'pubsub#max_items'})	.c('value').t('-1')	.tree();	wRep.connection.sendIQ(repNode_set);			// publish rgInfo item iq	var infoItem_set = $iq({type:'set', to:'pubsub.'+ wRep.host}).c('pubsub', {'xmlns':'http://jabber.org/protocol/pubsub'}).c('publish', {'node':data.rgName +'-repGroup'}).c('item', {'id':'rgInfo'}).c('rginfo').t('info').tree();	wRep.connection.sendIQ(infoItem_set);		// publish rgCanned item iq	var cannedItem_set = $iq({type:'set', to:'pubsub.'+ wRep.host}).c('pubsub', {'xmlns':'http://jabber.org/protocol/pubsub'}).c('publish', {'node':data.rgName +'-repGroup'}).c('item', {'id':'rgCanned'}).c('rgcanned').c('folder').c('title').t('Folder').up().c('msgs').tree();	wRep.connection.sendIQ(cannedItem_set);		// publish rgDepartment item iq	var departmentItem_set = $iq({type:'set', to:'pubsub.'+ wRep.host}).c('pubsub', {'xmlns':'http://jabber.org/protocol/pubsub'}).c('publish', {'node':data.rgName +'-repGroup'}).c('item', {'id':'rgDepts'}).c('rgdepts').c('depts').c('department').c('title').t('Department').up().c('emails').tree();	wRep.connection.sendIQ(departmentItem_set);		// publish allReps item iq	var allRepsItem_set = $iq({type:'set', to:'pubsub.'+ wRep.host}).c('pubsub', {'xmlns':'http://jabber.org/protocol/pubsub'}).c('publish', {'node':'webVisitors'}).c('item', {'id': data.rgName +'-allReps'}).c('allreps').c('primary').up().c('secondary').up().c('backup').tree();	wRep.connection.sendIQ(allRepsItem_set);			// publush rgActiveQueues item iq		var primaryItem_set = $iq({type:'set', to:'pubsub.'+ wRep.host}).c('pubsub', {'xmlns':'http://jabber.org/protocol/pubsub'}).c('publish', {'node':'visitorQueues'}).c('item', {'id':data.rgName+'-active'}).c('queue').c('active').t('primary').tree();		wRep.connection.sendIQ(primaryItem_set);			// publush rgActiveQueues item iq	var rgVisits_Set = $iq({type: 'set', to: 'pubsub.'+ wRep.host, id: 'setvisitsNodeFor'+ data.rgName +'-visits'})	.c('pubsub', {xmlns: 'http://jabber.org/protocol/pubsub'})	.c('create', {node: data.rgName +'-visits'}).up()	.c('configure')	.c('x', {xmlns: 'jabber:x:data', type: 'submit'})	.c('field', {var: 'pubsub#title'})	.c('value').t(data.rgName +'-visits').up().up()	.c('field', {var: 'pubsub#description'})	.c('value').t('Active visits at '+ data.rgName).up().up()	.c('field', {var: 'pubsub#node_type'})	.c('value').t('leaf').up().up()	.c('field', {var: 'pubsub#subscribe'})	.c('value').t('1').up().up()	.c('field', {var: 'pubsub#deliver_payloads'})	.c('value').t('1').up().up()	.c('field', {var: 'pubsub#notify_config'})	.c('value').t('0').up().up()	.c('field', {var: 'pubsub#notify_delete'})	.c('value').t('1').up().up()	.c('field', {var: 'pubsub#notify_retract'})	.c('value').t('1').up().up()	.c('field', {var: 'pubsub#presence_based_delivery'})	.c('value').t('1').up().up()	.c('field', {var: 'pubsub#access_model'})	.c('value').t('whitelist').up().up()	.c('field', {var: 'pubsub#publish_model'})	.c('value').t('publishers').up().up()	.c('field', {var: 'pubsub#language'})	.c('value').t('XMPP-ROOMNAMES').up().up()	.c('field', {var: 'pubsub#send_item_subscribe'})	.c('value').t('1').up().up()	.c('field', {var: 'pubsub#persist_items'})	.c('value').t('1').up().up()	.c('field', {var: 'pubsub#max_items'})	.c('value').t('-1')	.tree();	wRep.connection.sendIQ(rgVisits_Set);});//--- submit edit user form$(document).on('submit', '#edit-domain-form', function(){	var $formID = $(this).attr('id');	var $formUrl = $(this).attr('action'); 	ValidateForm($formID);	if(ValidateForm($formID) == true) {	var data_string = $(this).serialize();	$('input[disabled]').each( function() {		data_string = data_string + '&' + $(this).attr('name') + '=' + $(this).val();	});		$.ajax({			cache: false,			type: "POST",			url: $formUrl,			data: data_string,			success: function(html){				$('span.error').html(html);			},error: function (xhr, ajaxOptions, thrownError) {				alert(xhr.responseText);			}		});	}	return false;});// show workgroup canned on user click on input field$(document).on('click', 'input.chat-input', function(){	$('#brwsrinfo > li').hide();	$('#chat-area > li').removeClass('on');	$(this).parent('li').addClass('on');	var room_data = $(this).parent().data('jid');	// show hide borwser info with selction on input field	var room = Strophe.getNodeFromJid(room_data)	$('#brwsrinfo-'+ room).show();		//show repGroupCanned on input field	var repGroup_ID = wRep.id_to_jid(room);	var rgCanned_get = $iq({type:"get", to:"pubsub."+ wRep.host})    	.c('pubsub', {xmlns:"http://jabber.org/protocol/pubsub"})        	.c('items', {'node':repGroup_ID+'-repGroup'})				.c('item', {'id':'rgCanned'}).tree();	wRep.connection.sendIQ(rgCanned_get, wRep.on_wgCanned);});//--- append canned msg to input field on user click$(document).on('click', '#chat-user-canned div.msgs > div, #chat-workgroup-canned div.msgs > div', function(e){	var $cannedMsg = $(this).text();	var $msgClass = $(e.target).attr('class');	if($msgClass == 'canned') {		var $inputValue = $('#chat-area li.on input.chat-input').val() + $cannedMsg;		$('#chat-area li.on input.chat-input').val($inputValue).focus();	} else if($msgClass == 'push') {		var $inputValue = $('#chat-area li.on input.chat-input').val() +		"<html xmlns='http://jabber.org/protocol/xhtml-im'><body xmlns='http://www.w3.org/1999/xhtml'>"+		"<a href='$cannedMsg'>"+ $cannedMsg +"</a></body></html>";		$('#chat-area li.on input.chat-input').val($inputValue).focus();	}});//--- compose chat msg$(document).on('keypress', 'input.chat-input', function (ev) {	var room = $(this).parent().data('jid');	if (ev.which === 13) {		ev.preventDefault();				var body = $(this).val();		var match = body.match(/^\/(.*?)(?: (.*))?$/);		var args = null;		if (match) {			if (match[1] === "msg") {				args = match[2].match(/^(.*?) (.*)$/);				if (wRep.participants[args[1]]) {					wRep.connection.send($msg({to: room + "/" + args[1], type: "chat"}).c('body').t(body));					wRep.add_message("<div class='message private'>@@ &lt;<span class='nick self'>" +							wRep.nickname +"</span>&gt; <span class='body'>" + args[2] + "</span> @@</div>");				} else {					wRep.add_message("<div class='notice error'>Error: User not in room.</div>");				}			} else if (match[1] === "me" || match[1] === "action") {				wRep.connection.send($msg({to: room, type: "groupchat"}).c('body').t('/me ' + match[2]));			} else if (match[1] === "topic") {				wRep.connection.send($msg({to: room, type: "groupchat"}).c('subject').text(match[2]));			} else if (match[1] === "kick") {				wRep.connection.sendIQ($iq({to: room, type: "set"}).c('query', {xmlns: wRep.WG_MUC + "#admin"})						.c('item', {nick: match[2], role: "none"}));			} else if (match[1] === "ban") {wRep.connection.sendIQ($iq({to: room, type: "set"})						.c('query', {xmlns: wRep.WG_MUC + "#admin"})						.c('item', {jid: wRep.participants[match[2]], affiliation: "outcast"}));			} else if (match[1] === "op") {				wRep.connection.sendIQ($iq({to: room,type: "set"}).c('query', {xmlns: wRep.WG_MUC + "#admin"})						.c('item', {jid: wRep.participants[match[2]], affiliation: "admin"}));			} else if (match[1] === "deop") {				wRep.connection.sendIQ($iq({to: room, type: "set"}).c('query', {xmlns: wRep.WG_MUC + "#admin"})						.c('item', {jid: wRep.participants[match[2]], affiliation: "none"}));			} else {				wRep.add_message(					"<div class='notice error'>Error: Command not recognized.</div>");			}		} else {			wRep.connection.send($msg({to: room, type: "groupchat"}).c('body').t(body));			$(this).val('');			$(this).parent().data('composing', false);		}	} else {		var composing = $(this).parent().data('composing');		if (!composing) {			var room_comp = room.substring(0,room.indexOf('_'));			var notify = $msg({to: room +'/'+ room_comp, "type":"chat"}).c('composing', {xmlns: "http://jabber.org/protocol/chatstates"});			wRep.connection.send(notify);			$(this).parent().data('composing', true);		}	}});//--- user joined$(document).on('room_joined', function () {    wRep.joined = true;});//--- user left room$(document).on('user_left', function (e, data) {$('#chat-' + data.roomid + ' .chat-messages').append(		"<div class='chat-message'><span class='chat-name'>"+ data.roomid +		": </span><span class='chat-text notice'>Client left chat</span></div>");				//--- create unmailed form	if($('#ribbon > #'+ data.roomid).length > 0) {		$('#ribbon > #'+ data.roomid).removeAttr('class').appendTo('#unmailed');		if($('#form-'+ data.roomid).length === 0){			$('#'+ data.roomid).append('<div class="unmailedForm">'+ wRep.unmail_form +"</div>");			$('#chat-'+ data.roomid +' > div.chat-info').children().prependTo('#'+ data.roomid + ' > div > form');			$('#chat-'+ data.roomid +' > div.chat-messages').appendTo('#'+ data.roomid +' > div');			$('#'+ data.roomid + ' input[name="wg-name"]').val(wRep.id_to_jid(data.roomid));			$('#'+ data.roomid + ' input[name="ip-address"]').val($('#brwsrinfo-'+ data.roomid).children('span').text());						// send unavailable presence to room			var room_data = $('#chat-' + data.roomid).data('jid');			wRep.connection.send($pres({to: room_data +"/"+ wRep.nickname, type: 'unavailable'}).c('x', {xmlns: "http://jabber.org/protocol/muc"}).tree());						// remove chat room div and browserinfo						$('#chat-'+ data.roomid +', #brwsrinfo-'+ data.roomid).remove();			//update chat count			var repchats_set = $iq({type:'set', to:'pubsub.'+ wRep.host}).c('pubsub', {xmlns:'http://jabber.org/protocol/pubsub'}).c('publish', {node:'allRepsVisits'}).c('item', {id:Strophe.getNodeFromJid(wRep.connection.jid)}).c('chats').t(''+$('#ribbon li').length+'').tree();			wRep.connection.sendIQ(repchats_set);						//set room names in repVisits			$('#roomsxml').empty();			traverseID($('#roomsxml'), $('#ribbonParent').children().first());			var repRooms_set = "<iq type='set' to='pubsub."+ wRep.host +"'><pubsub xmlns='http://jabber.org/protocol/pubsub'><publish node='"+ Strophe.getNodeFromJid(wRep.connection.jid) +"-repStats'>"+"<item id='repVisits'>"+ $('#roomsxml').html() +"</item></publish></pubsub></iq>";			var repRooms_xml = wRep.text_to_xml(repRooms_set);			wRep.connection.sendIQ(repRooms_xml);						//set unmailed in repunmailed			var repRooms_set = "<iq type='set' to='pubsub."+ wRep.host +"'><pubsub xmlns='http://jabber.org/protocol/pubsub'><publish node='"+ Strophe.getNodeFromJid(wRep.connection.jid) +"-repStats'>"+"<item id='repUnmailed'><repunmailed>"+ $('#unmailed li').length +"</repunmailed></item></publish></pubsub></iq>";			var repUnmailed_xml = wRep.text_to_xml(repRooms_set);			wRep.connection.sendIQ(repUnmailed_xml);		}	}});$(document).on('click', 'div.ribbon > div', function(){	var room_id = $(this).text();	if($('#mnt-'+ room_id).length === 0){		$('#monitor').append('<li id="mnt-'+ room_id +'" class="quarter"><img class="mnt-restore" src="assets/img/restore.png"><div class="chat-messages"></div></li>');		wRep.connection.send($pres({to: room_id +"@conference."+ wRep.host +"/"+ wRep.nickname}).c('x', {xmlns: "http://jabber.org/protocol/muc"}).tree());		$('#mnt-' + room_id).data('jid', room_id);	} else {		$('#mnt-'+ room_id).show();	}});$(document).on('click', 'img.mnt-restore', function(){	var room_data = $(this).parent('li').data('jid');	wRep.connection.send($pres({to: room_data +"/"+ wRep.nickname, type: 'unavailable'})	.c('x', {xmlns: "http://jabber.org/protocol/muc"}).tree());	$(this).parent('li').remove();});// HTML to xml div Class as nodeNamefunction traverseHTML(node,tree) {	var children=$(tree).children();	var attribute = $(tree).attr('class');	node.append("<"+ attribute +">");	if (children.length){		children.each(function(){			var li=$(node).children(':last');			traverseHTML(li,this);		});	}else{		$((node).children(':last')).text($(tree).text());	}}// HTML to xml div ID as nodeNamefunction traverseID(node,tree) {	var children=$(tree).children();	var li_id = $(tree).attr('id');	var attribute = li_id.substring(li_id.indexOf('_')).replace(/_/g, "");	node.append("<"+ attribute +">");	if (children.length){		children.each(function(){			var li=$(node).children(':last');			traverseID(li,this);		});	} else {		$((node).children(':last')).text($(tree).text());	}}// xml to HTML nodeName as div classfunction traverseXML(node,tree) {	var children=$(tree).children();	$(node).append("<div class="+ tree.nodeName +">");	if (children.length){		children.each(function(){			var li=$(node).children(':last');			traverseXML(li,this);		});	}else{		$((node).children(':last')).text($(tree).text());	}}// just elemnt no children text selector jQuery pluginjQuery.fn.justtext = function() {    return $(this).clone().children().remove().end().text();};